#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

warn () {
  printf "\r  [ \033[0;33m!\033[0m ] $1\n"
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_files () {
  overwrite_all=false
  backup_all=false
  skip_all=false

  dest_path_prefix=$1
  shift
  find_results=$@

  for source in $find_results
  do
    dest="$dest_path_prefix`basename \"${source%.symlink}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

install_dotfiles() {
  info 'installing dotfiles'
  find_results=`find $DOTFILES_ROOT/. -maxdepth 2 -name \*.symlink`
  dest_path_prefix="$HOME/."

  install_files $dest_path_prefix $find_results
  success "installed dotfiles"
}

install_fish_config() {
  info 'installing fish config'
  find_results=`find $DOTFILES_ROOT/fish/config -maxdepth 2 -name \*.symlink`
  dest_path_prefix="$HOME/.config/"

  if [ ! -d "$HOME/.config" ]; then
    mkdir -p $HOME/.config
  fi

  install_files $dest_path_prefix $find_results
  success "installed fish config"
}

install_fish_themes() {
  info 'installing fish themes'

  if [ -z "$OMF_CONFIG" ]; then
    OMF_CONFIG="$HOME/.config/omf"
  fi

  if [ -z "$OMF_PATH" ]; then
    OMF_PATH="$HOME/.local/share/omf"
  fi

  find_results=`find $OMF_CONFIG/themes -mindepth 1 -maxdepth 1 -type d`
  dest_path_prefix="$OMF_PATH/themes/"

  install_files $dest_path_prefix $find_results
  success "installed fish themes"
}

setup_gitconfig
install_dotfiles
install_fish_config
install_fish_themes

echo ''
echo '  All installed!'
